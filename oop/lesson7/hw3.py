#Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
# вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создаётся общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****...,
# где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.

class Cell:
    def __init__(self, param):
        self.p = param
    def __add__(self, other):
        return Cell(self.p + other.p)
    def __sub__(self, other):
        if self.p > other.p:
            return Cell(self.p - other.p)
    def __mul__(self, other):
        return Cell(self.p * other.p)
    def __truediv__(self, other):
        return Cell(self.p // other.p)

    def make_order(self, cell_row):
        row = ''
        for i in range(int(self.p / cell_row)):
            row += f'{"*" * cell_row} \\n'
        row += f'{"*" * (self.p % cell_row)}'
        return row

    def __str__(self):
        return f"Клетка состоит из {self.p} ячеек"

cell_1 = Cell(10)
print(cell_1)
cell_2 = Cell(5)
print(cell_2)

print(cell_1 + cell_2)
print(cell_1 - cell_2)
print(cell_1 * cell_2)
print(cell_1 / cell_2)
print((cell_1).make_order(5))



